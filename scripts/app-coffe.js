// Generated by CoffeeScript 1.11.1
(function() {
  var Storage, Task, TaskCollection;

  Task = (function() {
    function Task(title, database, todo, id, done, doneAt) {
      if (id == null) {
        id = false;
      }
      if (done == null) {
        done = false;
      }
      if (doneAt == null) {
        doneAt = null;
      }
      if (!id) {
        this.id = Math.floor(Math.random() * (9999 - 1000 + 1)) + 1;
      } else {
        this.id = id;
      }
      this.title = title;
      this.done = done;
      this.doneAt = doneAt;
    }

    Task.prototype.markAsDone = function(database, todo) {
      var $doneAtEm, $label;
      this.done = true;
      this.doneAt = new Date();
      $label = this.$node.find('label');
      $label.addClass('taskDone');
      $doneAtEm = $('<em>').text("(" + (this.doneAt.toLocaleString()) + ")");
      $label.append($doneAtEm);
      return database.update(todo);
    };

    Task.prototype.markAsUndone = function(database, todo) {
      var $doneAtEm, $label;
      this.done = false;
      this.doneAt = null;
      $label = this.$node.find('label');
      $label.removeClass('taskDone');
      $doneAtEm = this.$node.find('em').remove();
      return database.update(todo);
    };

    Task.prototype.getNodeString = function(database, todo) {
      var task;
      task = this;
      if (this.$node == null) {
        this.$node = $("<li><input class='teal accent-2' type='checkbox' id='task-" + this.id + "'><label for='task-" + this.id + "'>" + this.title + "</label><i data-id='" + this.id + "'' class='js-remove-task material-icons right-float teal-text '>not_interested</i></li>");
        this.$node.find('input').change(function() {
          if ($(this).is(":checked")) {
            return task.markAsDone(database, todo);
          } else {
            return task.markAsUndone(database, todo);
          }
        });
      }
      return this.$node;
    };

    Task.prototype.toString = function() {
      var data;
      data = {
        id: this.id,
        title: this.title,
        done: this.done,
        doneAt: this.doneAt
      };
      return JSON.stringify(data);
    };

    return Task;

  })();

  TaskCollection = (function() {
    function TaskCollection($list, tasks) {
      if (tasks == null) {
        tasks = {};
      }
      this.tasks = tasks;
      this.list = $list;
      this.list.html('');
      this.addTasks(tasks);
    }

    TaskCollection.prototype.addTask = function(task, database) {
      var taskNode;
      taskNode = task.getNodeString(database, this);
      taskNode.hide();
      this.list.prepend(taskNode);
      taskNode.fadeIn(800);
      if (task.doneAt) {
        taskNode.find('input').prop('checked', true).change();
      }
      return this.tasks[task.id] = task;
    };

    TaskCollection.prototype.addTasks = function(tasks) {
      var i, len, ref, results, task;
      ref = this.tasks;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        task = ref[i];
        results.push(this.addTask(task));
      }
      return results;
    };

    TaskCollection.prototype.getTask = function(taskID) {
      return this.tasks[taskID];
    };

    TaskCollection.prototype.clearTask = function(taskID, database) {
      $("#task-" + taskID).parent('li').animate({
        height: 0,
        padding: 0,
        border: 0
      }).fadeOut;
      database.removeItem(taskID);
      return delete this.tasks.taskID;
    };

    TaskCollection.prototype.clearTasks = function() {
      return this.list.html('');
    };

    return TaskCollection;

  })();

  Storage = (function() {
    function Storage(name) {
      this.name = name;
      if (localStorage.hasOwnProperty(name)) {
        this.storage = [];
        this.getItems();
      } else {
        this.storage = [];
        localStorage.clear();
        localStorage.setItem(name, JSON.stringify(this.storage));
      }
    }

    Storage.prototype.setItem = function(item) {
      this.storage.push(item);
      console.log(JSON.stringify(this.storage));
      return localStorage.setItem(this.name, JSON.stringify(this.storage));
    };

    Storage.prototype.getItems = function() {
      this.storage = JSON.parse(localStorage.getItem(this.name));
      return this.storage;
    };

    Storage.prototype.getItem = function(id) {
      var data, dataInString, i, len, ref;
      ref = this.storage;
      for (i = 0, len = ref.length; i < len; i++) {
        dataInString = ref[i];
        data = JSON.parse(dataInString);
        if (data.id === id) {
          return data;
        } else {
          return false;
        }
      }
    };

    Storage.prototype.removeItem = function(id) {
      var data, dataInString, i, index, len, ref, results;
      console.log('start ofremoving', id);
      ref = this.storage;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        dataInString = ref[i];
        data = JSON.parse(dataInString);
        if (data.id === parseInt(id)) {
          index = this.storage.indexOf(dataInString);
          this.storage.splice(index, 1);
          results.push(localStorage.setItem(this.name, JSON.stringify(this.storage)));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Storage.prototype.update = function(todo) {
      var i, id, index, len, ref, storagedTask, storagedTaskInString, task, taskInString;
      for (id in todo.tasks) {
        task = todo.tasks[id];
        taskInString = task.toString();
        ref = this.storage;
        for (i = 0, len = ref.length; i < len; i++) {
          storagedTaskInString = ref[i];
          storagedTask = JSON.parse(storagedTaskInString);
          if (storagedTask.id === parseInt(id)) {
            index = this.storage.indexOf(storagedTaskInString);
            this.storage[index] = taskInString;
          }
        }
      }
      return localStorage.setItem(this.name, JSON.stringify(this.storage));
    };

    return Storage;

  })();

  $(function() {
    var database, initialize, loadTasks, todo;
    database = new Storage('tasks');
    initialize = function() {
      var dummyTasks, i, len, newTask, results, task;
      dummyTasks = ["Testowe zadanie", "PamiÄ™taj by nas usunac"];
      if (database.getItems().length === 0) {
        results = [];
        for (i = 0, len = dummyTasks.length; i < len; i++) {
          task = dummyTasks[i];
          newTask = new Task(task, database, todo);
          results.push(database.setItem(newTask.toString()));
        }
        return results;
      }
    };
    todo = new TaskCollection($('.js-todo-list'));
    loadTasks = function() {
      var i, len, ref, results, task, taskData, taskInString;
      ref = database.getItems();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        taskInString = ref[i];
        taskData = JSON.parse(taskInString);
        console.log(taskData.id);
        task = new Task(taskData.title, database, todo, taskData.id, taskData.done, taskData.doneAt);
        results.push(todo.addTask(task, database));
      }
      return results;
    };
    loadTasks();
    $('.js-noweZadanie').keypress(function(evt) {
      var task, taskTitle;
      taskTitle = this.value;
      if (evt.which === 13) {
        task = new Task(taskTitle, database, todo);
        todo.addTask(task, database);
        database.setItem(task.toString());
        return this.value = '';
      }
    });
    $('#js-add').click(function(evt) {
      evt.preventDefault();
      return $('.js-noweZadanie')[0].focus();
    });
    $(document).on('click', '.js-remove-task', function(evt) {
      var id;
      evt.preventDefault();
      console.log('clicked remove');
      id = $(this).data('id');
      return todo.clearTask(id, database);
    });
    $('.btn-large').click(function(evt) {
      var results, task;
      results = [];
      for (task in todo.tasks) {
        console.log(task);
        if (todo.tasks[task].done) {
          results.push(todo.clearTask(task, database));
        } else {
          results.push(void 0);
        }
      }
      return results;
    });
    return $('#js-remove-list').click(function(evt) {
      evt.preventDefault();
      if (confirm("Napewno usunac wszystkie zadania ?")) {
        localStorage.clear();
        database.storage = [];
      }
      todo.clearTasks();
      return void 0;
    });
  });

}).call(this);
